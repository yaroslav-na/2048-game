{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.js","src/modules/Board.js","src/modules/getRandomNumber.js","src/scripts/displayMessage.js","src/scripts/placeState.js"],"sourcesContent":["\"use strict\";\nvar $9c4c822ef6cf8fbe$exports = {};\n\"use strict\";\nvar $1b68160f467c2522$exports = {};\n\"use strict\";\nclass $1b68160f467c2522$var$Board {\n    static SIZE = 4;\n    #state;\n    /**\r\n   *\r\n   * @param {number[][]} state\r\n   */ constructor(state){\n        this.#state = state;\n    }\n    /**\r\n   *\r\n   *\r\n   * @param {(\r\n   *  boardItemValue: number,\r\n   *  indexes: {x: number, y: number},\r\n   *  board: number[][]\r\n   * ) => boolean} filterFn\r\n   * @returns {{x: number, y: number}[]}\r\n   */ filterCells(filterFn) {\n        const result = [];\n        const state = this.getState();\n        for(const y in state)for(const x in state[y]){\n            const indexes = {\n                x: x,\n                y: y\n            };\n            if (filterFn(state[y][x], indexes, state)) result.push(indexes);\n        }\n        return result;\n    }\n    /**\r\n   *\r\n   * @returns {number[][]}\r\n   */ getState() {\n        return [\n            ...this.#state\n        ].map((row)=>[\n                ...row\n            ]);\n    }\n    getMovedLeftState() {\n        const newState = [];\n        const mergedValues = [];\n        const state = this.getState();\n        for (const row of state){\n            const { mergedValues: mergedAxisValues, newAxis: newAxis } = this.#moveAxis(row);\n            newState.push(newAxis);\n            mergedValues.push(...mergedAxisValues);\n        }\n        return {\n            newState: newState,\n            mergedValues: mergedValues\n        };\n    }\n    getMovedRightState() {\n        const newState = [];\n        const mergedValues = [];\n        const state = this.getState();\n        for (const row of state){\n            const { mergedValues: mergedAxisValues, newAxis: newAxis } = this.#moveAxis(row.reverse());\n            newState.push(newAxis.reverse());\n            mergedValues.push(...mergedAxisValues);\n        }\n        return {\n            newState: newState,\n            mergedValues: mergedValues\n        };\n    }\n    getMovedUpState() {\n        const state = this.getState();\n        const mergedValues = [];\n        for(const x in state){\n            const column = [];\n            for(const y in state[x])column.push(state[y][x]);\n            const { mergedValues: mergedAxisValues, newAxis: newColumn } = this.#moveAxis(column);\n            for(const y in state[x])state[y][x] = newColumn[y];\n            mergedValues.push(...mergedAxisValues);\n        }\n        return {\n            newState: state,\n            mergedValues: mergedValues\n        };\n    }\n    getMovedDownState() {\n        const state = this.getState().reverse();\n        const mergedValues = [];\n        for(const x in state){\n            const column = [];\n            for(const y in state[x])column.push(state[y][x]);\n            const { mergedValues: mergedAxisValues, newAxis: newColumn } = this.#moveAxis(column);\n            for(const y in state[x])state[y][x] = newColumn[y];\n            mergedValues.push(...mergedAxisValues);\n        }\n        return {\n            newState: state.reverse(),\n            mergedValues: mergedValues\n        };\n    }\n    /**\r\n   *\r\n   * @param {number[]} axis\r\n   */ #moveAxis(axis) {\n        const nonEmptyCells = axis.filter((item)=>item !== 0);\n        const newAxis = [];\n        const mergedValues = [];\n        for(let index = 0; index < nonEmptyCells.length; index++){\n            let currentValue = nonEmptyCells[index];\n            const nextValue = nonEmptyCells[index + 1];\n            if (currentValue === nextValue) {\n                currentValue = currentValue + nextValue;\n                mergedValues.push(currentValue);\n                index++;\n            }\n            newAxis.push(currentValue);\n        }\n        while(newAxis.length < axis.length)newAxis.push(0);\n        return {\n            newAxis: newAxis,\n            mergedValues: mergedValues\n        };\n    }\n}\n$1b68160f467c2522$exports = $1b68160f467c2522$var$Board;\n\n\nvar $0bc8b5a8db705ce8$exports = {};\n/**\r\n *\r\n * @param {number} max\r\n * @param {number} min\r\n * @returns random number from `min` inclusive to `max` exclusive\r\n * @example getRandomNumber(10, 20): // any number in [10, 11...19]\r\n */ function $0bc8b5a8db705ce8$var$getRandomNumber(max, min = 0) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\n$0bc8b5a8db705ce8$exports = $0bc8b5a8db705ce8$var$getRandomNumber;\n\n\n/**\r\n * This class represents the game.\r\n * Now it has a basic structure, that is needed for testing.\r\n * Feel free to add more props and methods if needed.\r\n */ class $9c4c822ef6cf8fbe$var$Game {\n    static STATUSES = {\n        idle: \"idle\",\n        playing: \"playing\",\n        lose: \"lose\",\n        win: \"win\"\n    };\n    #initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    #board;\n    #score;\n    #status;\n    /**\r\n   * Creates a new game instance.\r\n   *\r\n   * @param {number[][]} initialState\r\n   * The initial state of the board.\r\n   * @default\r\n   * [[0, 0, 0, 0],\r\n   *  [0, 0, 0, 0],\r\n   *  [0, 0, 0, 0],\r\n   *  [0, 0, 0, 0]]\r\n   *\r\n   * If passed, the board will be initialized with the provided\r\n   * initial state.\r\n   */ constructor(initialState){\n        this.#initialState = initialState ?? this.#initialState;\n        this.restart();\n    }\n    moveLeft() {\n        this.#move(()=>this.#board.getMovedLeftState());\n    }\n    moveRight() {\n        this.#move(()=>this.#board.getMovedRightState());\n    }\n    moveUp() {\n        this.#move(()=>this.#board.getMovedUpState());\n    }\n    moveDown() {\n        this.#move(()=>this.#board.getMovedDownState());\n    }\n    /**\r\n   * @returns {number}\r\n   */ getScore() {\n        return this.#score;\n    }\n    /**\r\n   * @returns {number[][]}\r\n   */ getState() {\n        return this.#board.getState();\n    }\n    /**\r\n   * Returns the current game status.\r\n   *\r\n   * @returns {Game.STATUSES[keyof Game.STATUSES]}\r\n   *\r\n   * `idle` - the game has not started yet (the initial state);\r\n   * `playing` - the game is in progress;\r\n   * `win` - the game is won;\r\n   * `lose` - the game is lost\r\n   */ getStatus() {\n        return this.#status;\n    }\n    /**\r\n   * Starts the game.\r\n   */ start() {\n        const CELLS_TO_FILL = 2;\n        this.#status = $9c4c822ef6cf8fbe$var$Game.STATUSES.playing;\n        for(let cellsLeft = CELLS_TO_FILL; cellsLeft > 0; cellsLeft--)this.#fillRandomCell();\n    }\n    /**\r\n   * Resets the game.\r\n   */ restart() {\n        this.#status = $9c4c822ef6cf8fbe$var$Game.STATUSES.idle;\n        this.#score = 0;\n        this.#board = new $1b68160f467c2522$exports(this.#initialState);\n    }\n    /**\r\n   *\r\n   * @param {() => {newState: number[][], mergedValues: number[]}} cb\r\n   */ #move(cb) {\n        if (this.#status !== $9c4c822ef6cf8fbe$var$Game.STATUSES.playing) return;\n        const { newState: newState, mergedValues: mergedValues } = cb();\n        if (JSON.stringify(newState) === JSON.stringify(this.#board.getState())) return;\n        this.#score += mergedValues.reduce((sum, value)=>sum + value, 0);\n        this.#board = new $1b68160f467c2522$exports(newState);\n        this.#fillRandomCell();\n        this.#checkWin();\n        this.#checkLose();\n    }\n    #checkWin() {\n        const WIN_VALUE = 2048;\n        const doesStateIncludeWinValue = this.#board.getState().flat().find((value)=>value === WIN_VALUE);\n        if (doesStateIncludeWinValue) this.#status = $9c4c822ef6cf8fbe$var$Game.STATUSES.win;\n    }\n    #checkLose() {\n        const state = this.#board.getState();\n        const canStateBeChanged = [\n            \"getMovedUpState\",\n            \"getMovedRightState\",\n            \"getMovedLeftState\",\n            \"getMovedDownState\"\n        ].some((getMovedState)=>{\n            const { newState: newState } = this.#board[getMovedState]();\n            return JSON.stringify(state) !== JSON.stringify(newState);\n        });\n        if (canStateBeChanged) return;\n        this.#status = $9c4c822ef6cf8fbe$var$Game.STATUSES.lose;\n    }\n    #fillRandomCell() {\n        const SMALL_NUMBER = 2;\n        const BIG_NUMBER = 4;\n        if (this.#status !== $9c4c822ef6cf8fbe$var$Game.STATUSES.playing) return;\n        const removeZeros = (value)=>value === 0;\n        const cellsWithZeros = this.#board.filterCells(removeZeros);\n        if (cellsWithZeros.length === 0) return;\n        const { x: x, y: y } = cellsWithZeros[$0bc8b5a8db705ce8$exports(cellsWithZeros.length)];\n        const state = this.#board.getState();\n        state[y][x] = $0bc8b5a8db705ce8$exports(10) === 0 ? BIG_NUMBER : SMALL_NUMBER;\n        this.#board = new $1b68160f467c2522$exports(state);\n    }\n}\n$9c4c822ef6cf8fbe$exports = $9c4c822ef6cf8fbe$var$Game;\n\n\nvar $4016a914b2c63aaf$exports = {};\n/**\n *\n * @param {Object<string, HTMLElement>} HTMLMessages\n * @param {string} gameStatus\n * @param {string} hiddenClass\n */ function $4016a914b2c63aaf$var$displayMessage(HTMLMessages, gameStatus, hiddenClass) {\n    for(const HTMLMessage in HTMLMessages)if (!HTMLMessages[HTMLMessage].classList.contains(hiddenClass)) HTMLMessages[HTMLMessage].classList.add(hiddenClass);\n    HTMLMessages[gameStatus]?.classList.remove(hiddenClass);\n}\n$4016a914b2c63aaf$exports = $4016a914b2c63aaf$var$displayMessage;\n\n\nvar $8ed6196043259236$exports = {};\n/**\n *\n * @param {number[][]} state\n * @param {HTMLElement[]} HTMLCells\n */ function $8ed6196043259236$var$placeState(state, HTMLCells) {\n    const FIELD_CELL_CLASSES = \"field-cell field-cell--\";\n    for(const y in state)for(const x in state[y]){\n        const currentCell = HTMLCells[y * state.length + +x];\n        const currentValue = state[y][x];\n        currentCell.innerHTML = currentValue;\n        currentCell.className = FIELD_CELL_CLASSES + currentValue;\n    }\n}\n$8ed6196043259236$exports = $8ed6196043259236$var$placeState;\n\n\nconst $09e991522ca7e64e$var$HIDDEN_CLASS = \"hidden\";\nconst $09e991522ca7e64e$var$HTMLStartButtons = {\n    start: document.querySelector(\".button.start\"),\n    restart: document.querySelector(\".button.restart\")\n};\nconst $09e991522ca7e64e$var$HTMLMessages = {\n    lose: document.querySelector(\".message.message-lose\"),\n    win: document.querySelector(\".message.message-win\"),\n    idle: document.querySelector(\".message.message-start\")\n};\nconst $09e991522ca7e64e$var$HTMLScore = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$HTMLCells = document.querySelectorAll(\".field-cell\");\nconst $09e991522ca7e64e$var$game = new $9c4c822ef6cf8fbe$exports();\n$09e991522ca7e64e$var$HTMLStartButtons.start.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$HTMLStartButtons.start.classList.add($09e991522ca7e64e$var$HIDDEN_CLASS);\n    $09e991522ca7e64e$var$HTMLStartButtons.restart.classList.remove($09e991522ca7e64e$var$HIDDEN_CLASS);\n    $09e991522ca7e64e$var$game.start();\n    $8ed6196043259236$exports($09e991522ca7e64e$var$game.getState(), $09e991522ca7e64e$var$HTMLCells);\n    $4016a914b2c63aaf$exports($09e991522ca7e64e$var$HTMLMessages, $09e991522ca7e64e$var$game.getStatus(), $09e991522ca7e64e$var$HIDDEN_CLASS);\n});\n$09e991522ca7e64e$var$HTMLStartButtons.restart.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$HTMLStartButtons.restart.classList.add($09e991522ca7e64e$var$HIDDEN_CLASS);\n    $09e991522ca7e64e$var$HTMLStartButtons.start.classList.remove($09e991522ca7e64e$var$HIDDEN_CLASS);\n    $09e991522ca7e64e$var$game.restart();\n    $8ed6196043259236$exports($09e991522ca7e64e$var$game.getState(), $09e991522ca7e64e$var$HTMLCells);\n    $4016a914b2c63aaf$exports($09e991522ca7e64e$var$HTMLMessages, $09e991522ca7e64e$var$game.getStatus(), $09e991522ca7e64e$var$HIDDEN_CLASS);\n    $09e991522ca7e64e$var$HTMLScore.innerHTML = $09e991522ca7e64e$var$game.getScore();\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    switch(e.code){\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n    }\n    $09e991522ca7e64e$var$HTMLScore.innerHTML = $09e991522ca7e64e$var$game.getScore();\n    $4016a914b2c63aaf$exports($09e991522ca7e64e$var$HTMLMessages, $09e991522ca7e64e$var$game.getStatus(), $09e991522ca7e64e$var$HIDDEN_CLASS);\n    $8ed6196043259236$exports($09e991522ca7e64e$var$game.getState(), $09e991522ca7e64e$var$HTMLCells);\n});\n\n\n//# sourceMappingURL=index.c3e9fb10.js.map\n","'use strict';\n\nconst Game = require('../modules/Game');\nconst displayMessage = require('./displayMessage');\nconst placeState = require('./placeState');\n\nconst HIDDEN_CLASS = 'hidden';\n\nconst HTMLStartButtons = {\n  start: document.querySelector('.button.start'),\n  restart: document.querySelector('.button.restart'),\n};\nconst HTMLMessages = {\n  lose: document.querySelector('.message.message-lose'),\n  win: document.querySelector('.message.message-win'),\n  idle: document.querySelector('.message.message-start'),\n};\nconst HTMLScore = document.querySelector('.game-score');\nconst HTMLCells = document.querySelectorAll('.field-cell');\n\nconst game = new Game();\n\nHTMLStartButtons.start.addEventListener('click', () => {\n  HTMLStartButtons.start.classList.add(HIDDEN_CLASS);\n  HTMLStartButtons.restart.classList.remove(HIDDEN_CLASS);\n\n  game.start();\n  placeState(game.getState(), HTMLCells);\n  displayMessage(HTMLMessages, game.getStatus(), HIDDEN_CLASS);\n});\n\nHTMLStartButtons.restart.addEventListener('click', () => {\n  HTMLStartButtons.restart.classList.add(HIDDEN_CLASS);\n  HTMLStartButtons.start.classList.remove(HIDDEN_CLASS);\n\n  game.restart();\n  placeState(game.getState(), HTMLCells);\n  displayMessage(HTMLMessages, game.getStatus(), HIDDEN_CLASS);\n  HTMLScore.innerHTML = game.getScore();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  switch (e.code) {\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n  }\n\n  HTMLScore.innerHTML = game.getScore();\n  displayMessage(HTMLMessages, game.getStatus(), HIDDEN_CLASS);\n  placeState(game.getState(), HTMLCells);\n});\n","'use strict';\r\n\r\n// const getRandomNumber = require('../utils/getRandomNumber');\r\nconst Board = require('./Board');\r\nconst getRandomNumber = require('./getRandomNumber');\r\n\r\n/**\r\n * This class represents the game.\r\n * Now it has a basic structure, that is needed for testing.\r\n * Feel free to add more props and methods if needed.\r\n */\r\nclass Game {\r\n  static STATUSES = {\r\n    idle: 'idle',\r\n    playing: 'playing',\r\n    lose: 'lose',\r\n    win: 'win',\r\n  };\r\n\r\n  #initialState = [\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n  ];\r\n  #board;\r\n  #score;\r\n  #status;\r\n\r\n  /**\r\n   * Creates a new game instance.\r\n   *\r\n   * @param {number[][]} initialState\r\n   * The initial state of the board.\r\n   * @default\r\n   * [[0, 0, 0, 0],\r\n   *  [0, 0, 0, 0],\r\n   *  [0, 0, 0, 0],\r\n   *  [0, 0, 0, 0]]\r\n   *\r\n   * If passed, the board will be initialized with the provided\r\n   * initial state.\r\n   */\r\n  constructor(initialState) {\r\n    this.#initialState = initialState ?? this.#initialState;\r\n    this.restart();\r\n  }\r\n\r\n  moveLeft() {\r\n    this.#move(() => this.#board.getMovedLeftState());\r\n  }\r\n  moveRight() {\r\n    this.#move(() => this.#board.getMovedRightState());\r\n  }\r\n  moveUp() {\r\n    this.#move(() => this.#board.getMovedUpState());\r\n  }\r\n  moveDown() {\r\n    this.#move(() => this.#board.getMovedDownState());\r\n  }\r\n\r\n  /**\r\n   * @returns {number}\r\n   */\r\n  getScore() {\r\n    return this.#score;\r\n  }\r\n\r\n  /**\r\n   * @returns {number[][]}\r\n   */\r\n  getState() {\r\n    return this.#board.getState();\r\n  }\r\n\r\n  /**\r\n   * Returns the current game status.\r\n   *\r\n   * @returns {Game.STATUSES[keyof Game.STATUSES]}\r\n   *\r\n   * `idle` - the game has not started yet (the initial state);\r\n   * `playing` - the game is in progress;\r\n   * `win` - the game is won;\r\n   * `lose` - the game is lost\r\n   */\r\n  getStatus() {\r\n    return this.#status;\r\n  }\r\n\r\n  /**\r\n   * Starts the game.\r\n   */\r\n  start() {\r\n    const CELLS_TO_FILL = 2;\r\n\r\n    this.#status = Game.STATUSES.playing;\r\n\r\n    for (let cellsLeft = CELLS_TO_FILL; cellsLeft > 0; cellsLeft--) {\r\n      this.#fillRandomCell();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resets the game.\r\n   */\r\n  restart() {\r\n    this.#status = Game.STATUSES.idle;\r\n    this.#score = 0;\r\n    this.#board = new Board(this.#initialState);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {() => {newState: number[][], mergedValues: number[]}} cb\r\n   */\r\n  #move(cb) {\r\n    if (this.#status !== Game.STATUSES.playing) {\r\n      return;\r\n    }\r\n\r\n    const { newState, mergedValues } = cb();\r\n\r\n    if (JSON.stringify(newState) === JSON.stringify(this.#board.getState())) {\r\n      return;\r\n    }\r\n\r\n    this.#score += mergedValues.reduce((sum, value) => sum + value, 0);\r\n    this.#board = new Board(newState);\r\n    this.#fillRandomCell();\r\n    this.#checkWin();\r\n    this.#checkLose();\r\n  }\r\n\r\n  #checkWin() {\r\n    const WIN_VALUE = 2048;\r\n    const doesStateIncludeWinValue = this.#board\r\n      .getState()\r\n      .flat()\r\n      .find((value) => value === WIN_VALUE);\r\n\r\n    if (doesStateIncludeWinValue) {\r\n      this.#status = Game.STATUSES.win;\r\n    }\r\n  }\r\n\r\n  #checkLose() {\r\n    const state = this.#board.getState();\r\n    const canStateBeChanged = [\r\n      'getMovedUpState',\r\n      'getMovedRightState',\r\n      'getMovedLeftState',\r\n      'getMovedDownState',\r\n    ].some((getMovedState) => {\r\n      const { newState } = this.#board[getMovedState]();\r\n\r\n      return JSON.stringify(state) !== JSON.stringify(newState);\r\n    });\r\n\r\n    if (canStateBeChanged) {\r\n      return;\r\n    }\r\n    this.#status = Game.STATUSES.lose;\r\n  }\r\n\r\n  #fillRandomCell() {\r\n    const SMALL_NUMBER = 2;\r\n    const BIG_NUMBER = 4;\r\n\r\n    if (this.#status !== Game.STATUSES.playing) {\r\n      return;\r\n    }\r\n\r\n    const removeZeros = (value) => value === 0;\r\n    const cellsWithZeros = this.#board.filterCells(removeZeros);\r\n\r\n    if (cellsWithZeros.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const { x, y } = cellsWithZeros[getRandomNumber(cellsWithZeros.length)];\r\n    const state = this.#board.getState();\r\n\r\n    state[y][x] = getRandomNumber(10) === 0 ? BIG_NUMBER : SMALL_NUMBER;\r\n\r\n    this.#board = new Board(state);\r\n  }\r\n}\r\n\r\nmodule.exports = Game;\r\n","'use strict';\r\n\r\nclass Board {\r\n  static SIZE = 4;\r\n  #state;\r\n\r\n  /**\r\n   *\r\n   * @param {number[][]} state\r\n   */\r\n\r\n  constructor(state) {\r\n    this.#state = state;\r\n  }\r\n\r\n  /**\r\n   *\r\n   *\r\n   * @param {(\r\n   *  boardItemValue: number,\r\n   *  indexes: {x: number, y: number},\r\n   *  board: number[][]\r\n   * ) => boolean} filterFn\r\n   * @returns {{x: number, y: number}[]}\r\n   */\r\n\r\n  filterCells(filterFn) {\r\n    const result = [];\r\n    const state = this.getState();\r\n\r\n    for (const y in state) {\r\n      for (const x in state[y]) {\r\n        const indexes = { x, y };\r\n\r\n        if (filterFn(state[y][x], indexes, state)) {\r\n          result.push(indexes);\r\n        }\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {number[][]}\r\n   */\r\n  getState() {\r\n    return [...this.#state].map((row) => [...row]);\r\n  }\r\n\r\n  getMovedLeftState() {\r\n    const newState = [];\r\n    const mergedValues = [];\r\n    const state = this.getState();\r\n\r\n    for (const row of state) {\r\n      const { mergedValues: mergedAxisValues, newAxis } = this.#moveAxis(row);\r\n\r\n      newState.push(newAxis);\r\n      mergedValues.push(...mergedAxisValues);\r\n    }\r\n\r\n    return { newState, mergedValues };\r\n  }\r\n\r\n  getMovedRightState() {\r\n    const newState = [];\r\n    const mergedValues = [];\r\n    const state = this.getState();\r\n\r\n    for (const row of state) {\r\n      const { mergedValues: mergedAxisValues, newAxis } = this.#moveAxis(\r\n        row.reverse(),\r\n      );\r\n\r\n      newState.push(newAxis.reverse());\r\n      mergedValues.push(...mergedAxisValues);\r\n    }\r\n\r\n    return { newState, mergedValues };\r\n  }\r\n\r\n  getMovedUpState() {\r\n    const state = this.getState();\r\n    const mergedValues = [];\r\n\r\n    for (const x in state) {\r\n      const column = [];\r\n\r\n      for (const y in state[x]) {\r\n        column.push(state[y][x]);\r\n      }\r\n\r\n      const { mergedValues: mergedAxisValues, newAxis: newColumn } =\r\n        this.#moveAxis(column);\r\n\r\n      for (const y in state[x]) {\r\n        state[y][x] = newColumn[y];\r\n      }\r\n\r\n      mergedValues.push(...mergedAxisValues);\r\n    }\r\n\r\n    return { newState: state, mergedValues };\r\n  }\r\n\r\n  getMovedDownState() {\r\n    const state = this.getState().reverse();\r\n    const mergedValues = [];\r\n\r\n    for (const x in state) {\r\n      const column = [];\r\n\r\n      for (const y in state[x]) {\r\n        column.push(state[y][x]);\r\n      }\r\n\r\n      const { mergedValues: mergedAxisValues, newAxis: newColumn } =\r\n        this.#moveAxis(column);\r\n\r\n      for (const y in state[x]) {\r\n        state[y][x] = newColumn[y];\r\n      }\r\n\r\n      mergedValues.push(...mergedAxisValues);\r\n    }\r\n\r\n    return { newState: state.reverse(), mergedValues };\r\n  }\r\n  /**\r\n   *\r\n   * @param {number[]} axis\r\n   */\r\n  #moveAxis(axis) {\r\n    const nonEmptyCells = axis.filter((item) => item !== 0);\r\n    const newAxis = [];\r\n    const mergedValues = [];\r\n\r\n    for (let index = 0; index < nonEmptyCells.length; index++) {\r\n      let currentValue = nonEmptyCells[index];\r\n      const nextValue = nonEmptyCells[index + 1];\r\n\r\n      if (currentValue === nextValue) {\r\n        currentValue = currentValue + nextValue;\r\n        mergedValues.push(currentValue);\r\n        index++;\r\n      }\r\n\r\n      newAxis.push(currentValue);\r\n    }\r\n\r\n    while (newAxis.length < axis.length) {\r\n      newAxis.push(0);\r\n    }\r\n\r\n    return { newAxis, mergedValues };\r\n  }\r\n}\r\n\r\nmodule.exports = Board;\r\n","/**\r\n *\r\n * @param {number} max\r\n * @param {number} min\r\n * @returns random number from `min` inclusive to `max` exclusive\r\n * @example getRandomNumber(10, 20): // any number in [10, 11...19]\r\n */\r\n\r\nfunction getRandomNumber(max, min = 0) {\r\n  return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\n\r\nmodule.exports = getRandomNumber;\r\n","/**\n *\n * @param {Object<string, HTMLElement>} HTMLMessages\n * @param {string} gameStatus\n * @param {string} hiddenClass\n */\nfunction displayMessage(HTMLMessages, gameStatus, hiddenClass) {\n  for (const HTMLMessage in HTMLMessages) {\n    if (!HTMLMessages[HTMLMessage].classList.contains(hiddenClass)) {\n      HTMLMessages[HTMLMessage].classList.add(hiddenClass);\n    }\n  }\n\n  HTMLMessages[gameStatus]?.classList.remove(hiddenClass);\n}\n\nmodule.exports = displayMessage;\n","/**\n *\n * @param {number[][]} state\n * @param {HTMLElement[]} HTMLCells\n */\nfunction placeState(state, HTMLCells) {\n  const FIELD_CELL_CLASSES = 'field-cell field-cell--';\n\n  for (const y in state) {\n    for (const x in state[y]) {\n      const currentCell = HTMLCells[y * state.length + +x];\n      const currentValue = state[y][x];\n\n      currentCell.innerHTML = currentValue;\n      currentCell.className = FIELD_CELL_CLASSES + currentValue;\n    }\n  }\n}\n\nmodule.exports = placeState;\n"],"names":["$9c4c822ef6cf8fbe$exports","$1b68160f467c2522$exports","SIZE","state","constructor","filterCells","filterFn","result","getState","y","x","indexes","push","map","row","getMovedLeftState","newState","mergedValues","mergedAxisValues","newAxis","moveAxis","getMovedRightState","reverse","getMovedUpState","column","newColumn","getMovedDownState","axis","nonEmptyCells","filter","item","index","length","currentValue","nextValue","$0bc8b5a8db705ce8$exports","max","min","Math","floor","random","$9c4c822ef6cf8fbe$var$Game","STATUSES","idle","playing","lose","win","initialState","board","score","status","restart","moveLeft","move","moveRight","moveUp","moveDown","getScore","getStatus","start","cellsLeft","fillRandomCell","cb","JSON","stringify","reduce","sum","value","checkWin","checkLose","flat","find","some","getMovedState","cellsWithZeros","$4016a914b2c63aaf$exports","HTMLMessages","gameStatus","hiddenClass","HTMLMessage","classList","contains","add","remove","$8ed6196043259236$exports","HTMLCells","currentCell","innerHTML","className","FIELD_CELL_CLASSES","$09e991522ca7e64e$var$HIDDEN_CLASS","$09e991522ca7e64e$var$HTMLStartButtons","document","querySelector","$09e991522ca7e64e$var$HTMLMessages","$09e991522ca7e64e$var$HTMLScore","$09e991522ca7e64e$var$HTMLCells","querySelectorAll","$09e991522ca7e64e$var$game","addEventListener","e","code"],"version":3,"file":"index.c3e9fb10.js.map"}